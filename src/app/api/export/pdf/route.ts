import { NextRequest, NextResponse } from 'next/server'
import jsPDF from 'jspdf'

interface Summary {
  id: string
  title: string
  content: string
  summaryType: string
  wordCount: number
  createdAt: string
  documentName: string
}

export async function POST(request: NextRequest) {
  try {
    const summary: Summary = await request.json()

    if (!summary || !summary.content) {
      return NextResponse.json(
        { error: 'Invalid summary data' },
        { status: 400 }
      )
    }

    // Create PDF document
    const doc = new jsPDF()
    
    // Set up fonts
    doc.setFont('helvetica')
    
    // Title
    doc.setFontSize(20)
    doc.text('Document Summary', 20, 30)
    
    // Metadata
    doc.setFontSize(12)
    let yPosition = 50
    
    doc.text(`Title: ${summary.title || 'Untitled'}`, 20, yPosition)
    yPosition += 10
    
    doc.text(`Document: ${summary.documentName}`, 20, yPosition)
    yPosition += 10
    
    doc.text(`Summary Type: ${summary.summaryType}`, 20, yPosition)
    yPosition += 10
    
    doc.text(`Word Count: ${summary.wordCount}`, 20, yPosition)
    yPosition += 10
    
    doc.text(`Generated: ${new Date(summary.createdAt).toLocaleString()}`, 20, yPosition)
    yPosition += 20
    
    // Summary Content
    doc.setFontSize(14)
    doc.text('Summary Content:', 20, yPosition)
    yPosition += 15
    
    // Split content into lines that fit the page width
    doc.setFontSize(11)
    const pageWidth = doc.internal.pageSize.width - 40 // 20px margin on each side
    const lines = doc.splitTextToSize(summary.content, pageWidth)
    
    // Add content lines
    for (const line of lines) {
      if (yPosition > 270) { // Near bottom of page
        doc.addPage()
        yPosition = 20
      }
      doc.text(line, 20, yPosition)
      yPosition += 6
    }
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      doc.setFontSize(10)
      doc.text(
        `Generated by AI Document Summarizer - Page ${i} of ${pageCount}`,
        20,
        doc.internal.pageSize.height - 10
      )
    }
    
    // Generate PDF as buffer
    const pdfBuffer = doc.output('arraybuffer')
    
    // Create response with PDF file
    const response = new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="summary-${summary.id}.pdf"`
      }
    })

    return response
  } catch (error) {
    console.error('PDF export error:', error)
    return NextResponse.json(
      { error: 'Failed to export summary as PDF' },
      { status: 500 }
    )
  }
}